#!/usr/bin/env python3

import os
import subprocess
import re
import yt_dlp

# Function : Get a valid save folder from the user
def get_valid_save_folder():
    while True:
        save_folder = input("Enter a save folder or press Enter to save on your Desktop: ").strip() or os.path.expanduser("~/Desktop")

        if os.path.exists(save_folder) and os.access(save_folder, os.W_OK):
            if re.match(r'^[/~\a-zA-Z0-9._-]+$', os.path.basename(save_folder)):
                return save_folder
            else:
                print("Folder name contains invalid characters. Please choose a valid folder name.")
        else:
            print(f"The directory '{save_folder}' does not exist or is not writable. Please choose a valid folder.")

# Function : Truncate a filename to a specified limit. This will avoid 'file name too long' errors.
def truncate_filename(filename, limit):
    if len(filename) > limit:
        ext = os.path.splitext(filename)[1]
        truncated_name = filename[:limit - len(ext) - 3] + "..." + ext
        return truncated_name
    else:
        return filename

# Function : Replace invalid characters in a filename. This will avoid 'invalid characters' problem when saving files.
def replace_invalid_chars(filename):
    return re.sub(r'[\/:*?"<>|]', '_', filename)

# Function : Download a video from a YouTube link
def download_video(link, save_folder):
    ydl_opts = {
        'format': 'best[height<=1080]',
        'outtmpl': os.path.join(save_folder, replace_invalid_chars('%(title)s.%(ext)s'))[:255]
    }
    
    ydl = yt_dlp.YoutubeDL(ydl_opts)

    try:
        ydl.download([link])
    except yt_dlp.DownloadError:
        print(f"Failed to download video from {link}")

# Function : Download audio from a YouTube link
def download_audio(link, save_folder):
    ydl_opts = {
        'format': 'bestaudio/best',
        'outtmpl': os.path.join(save_folder, replace_invalid_chars('%(title)s.%(ext)s'))[:255]
    }
    
    ydl = yt_dlp.YoutubeDL(ydl_opts)

    try:
        ydl.download([link])
    except yt_dlp.DownloadError:
        print(f"Failed to download audio from {link}")

# Function : download both video and audio from a YouTube link
def download_both(link, save_folder):
    download_video(link, save_folder)
    download_audio(link, save_folder)

if __name__ == "__main__":
    print("Welcome to the YouTube Video Downloader!")

    # Get a list of YouTube video links from the user
    youtube_links = input("Enter YouTube video links\nSeparate each link with a space: \n").split()

    while True:
        # Prompt the user to choose the media type to download (video, audio, or both)
        media_type = input("Choose media type (v for video, a for audio, b for both): ").strip().lower()

        if media_type in ('a', 'v', 'b'):
            break
        else:
            print("Please choose 'a' for audio, 'v' for video, or 'b' for both.")

    # Get a valid save folder from the user
    save_folder = get_valid_save_folder()

    print("Okay, you're all done! Let me take care of the rest.")
    
    # Download the selected media type for each YouTube link
    for link in youtube_links:
        if media_type == 'v':
            download_video(link, save_folder)
        elif media_type == 'a':
            download_audio(link, save_folder)
        elif media_type == 'b':
            download_both(link, save_folder)

    print("\nALL DONE!\n")
